

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.


Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]


APPROACH 1 ðŸ˜ŽðŸ˜Ž
class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int n =nums.length;
        int left[] = new int[n];
        int right[] = new int[n];

        // int sum =1;
        left[0] =nums[0];
        for(int i=1;i<n;i++){
           left[i] =nums[i]*left[i-1];
        }
        right[n-1] =nums[n-1];
        for(int i=n-2;i>=0;i--){
            right[i] =right[i+1]*nums[i];
        }

        int output[]= new int[n];
        output[0] =right[1];
        output[n-1] =left[n-2];
        for(int i=1;i<n-1;i++){
            output[i] =left[i-1]*right[i+1];
        }
        return output;
    }
}


APPROACH 2 ðŸ˜ŽðŸ˜Ž

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] output = new int[n];

        int leftProduct = 1;
        for (int i = 0; i < n; i++) {
            output[i] = leftProduct;
            leftProduct *= nums[i];
        }

        int rightProduct = 1;
        for (int i = n - 1; i >= 0; i--) {
            output[i] *= rightProduct;
            rightProduct *= nums[i];
        }

        return output;
    }
}
