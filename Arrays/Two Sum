Two sum Problem

// Input: nums = [2,7,11,15], target = 9
// Output: [0,1]
// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].




// BRUTE FORCE APPROACH

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        int arr[] = new int[2];
        int n =nums.length;
        for(int i=0;i<n;i++){
            for(int j =i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                    arr[0] =i;
                    arr[1] =j;
                    break;
                }
            }
        }
        return arr;
    }
}



// OPTIMAL SOLUTION

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
      Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int value = target - nums[i];
            if (map.containsKey(value)) {
                return new int[] { map.get(value), i };
            } else {
                map.put(nums[i], i);
            }
        }
        return new int[] {};
    }
}
