
//  3 SUM PROBLEM 

/*  Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

*/


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());

        set<vector<int>> set;
        vector<vector<int>> output;

        for(int i=0;i<nums.size()-1;i++){
            auto f =i+1;
            auto s =nums.size()-1;

            while(f<s){
                if(nums[f]+nums[s]+nums[i]>0){
                    s--;
                }

                else if(nums[f]+nums[s]+nums[i]<0){
                    f++;
                }

                else if(nums[f]+nums[s]==-nums[i]){
                   
                  set.insert({nums[i], nums[f], nums[s]});
                     f++;
                     s--;
                      
                    
                }
            }
        }
       for(auto i:set){
           output.push_back(i);
       }
       return output;
    }
};
